<?php


namespace common\models;

use yii\db\ActiveRecord;;

/**
 * This is the model class for table "{{%apple}}".
 *
 * @property int $id
 * @property string $color
 * @property string $top
 * @property string $left
 * @property float $size
 * @property int $status
 * @property int $fall_at
 * @property int $created_at
 * @property int $updated_at
 *
 */
class Apple extends ActiveRecord
{

    const STATUS_HANGING = 0;
    const STATUS_FALL = 1;
    const STATUS_ROTTEN = 2;
    const STATUS_EATEN = 3;

    private $colors = ['green','red','yellow'];

    public function rules()
    {
        return [
            [['color','top','left'], 'string'],
            [['size'], 'double'],
            [['status'], 'integer'],
            [['fall_at', 'created_at', 'updated_at'], 'integer'],
        ];
    }

    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],

        ];
    }

    public function beforeSave($insert)
    {
        if($this->isNewRecord){
            $this->top = rand(92,130);
            $this->left = rand(-76,180);
        }elseif($this->status == self::STATUS_FALL){
            $this->fall_at = time();
            if($this->size == 0){
                $this->status = self::STATUS_EATEN;
            }
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * @return array|bool
     */
    public function fallToGround(){
        if($this->status != self::STATUS_HANGING){
            return ['error' => "Яблоко уже на земле"];
        }
        $this->status = self::STATUS_FALL;
        $this->fall_at = time();
        if(!$this->save()){
            return ['error' => $this->getErrors()[0]];
        }
        return  true;
    }

    /**
     * @param float $sizeEaten
     * @return array|bool
     */
    public function eat($sizeEaten){
        $sizeEaten = $sizeEaten / 100;
        if($this->status == self::STATUS_HANGING){
            return ['error' => "Съесть нельзя, яблоко на дереве"];
        }elseif ($this->status == self::STATUS_ROTTEN) {
            return ['error' => "Съесть нельзя, яблоко гнилое"];
        }elseif ($this->status == self::STATUS_EATEN) {
            return ['error' => "Съесть нельзя, яблоко уже съедено"];
        }elseif($this->size < $sizeEaten){
            return ['error' => "Съесть нельзя, вы пытаетесь съесть больше чем осталось"];
        }else{
            $this->size = $this->size - $sizeEaten;
            try {
                $this->save();
            } catch (\Exception $ex) {
                return ['error' => $ex->getMessage()];
            }
        }

        return ['result' => 'success'];
    }


    /**
     * @param bool $count
     * @return bool
     */
    public function generateApples($count = false){
        $count = $count ? $count : rand(2,10);
        $x = 1;
        while ($x <= $count) {
            $appleModel = new Apple();
            $appleModel->color = $this->colors[array_rand($this->colors)];
            if(!$appleModel->save()){
                return false;
            }
            $x++;
        }
        return true;
    }

    public static function checkAppleRotten(){
        self::updateAll(['status' => self::STATUS_ROTTEN],['and',['status' => self::STATUS_FALL], 'fall_at <= UNIX_TIMESTAMP(NOW() - INTERVAL 5 HOUR)']);
    }

}